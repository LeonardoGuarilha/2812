# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - blogbalta2812webapp

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Criado uma variável de ambiente para ter a connection string para que possa rodar o update da database.
# Esse AZURE_SQL_CONNECTION_STRING tem que ser criado no repositório do GitHub em Settings > Secrets > Actions.
# Passando a connection string que temos no database no azure.
# Com isso, quando rodar, vai substituir a variável de ambiente ConnectionStrings__DefaultConnection pelo valor de secrets.AZURE_SQL_CONNECTION_STRING.
env:
    ConnectionStrings__DefaultConnection: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      # Esse AZURE_CREDENTIALS tem que ser criado no repositório do GitHub em Settings > Secrets > Actions
      # az ad sp create-for-rbac --name blogbalta2812deploy --role contributor --scopes /subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/blog/providers/Microsoft.Web/sites/blogbalta2812webapp --sdk-auth
      # Vamos copiar o JSON de resposta e colocar na secret AZURE_CREDENTIALS no repositório do GitHub.az account list par apegar o Id da Subscription.
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Pega o IP da máquina que está em execução no GitHub Actions
      - name: Get Current IP Address
        id: ip
        uses: haythem/public-ip@v1.2

      # Adiciona o IP nas regras de firewall do SQL Server no Azure
      - name: Add IP address to SQL Server
      # Ele disponibiliza tanto o ipv4 quanto o ipv6
        run: az sql server firewall-rule create --resource-group blog --server blogbalta2012sqlserver --name ghactions --start-ip-address ${{ steps.ip.outputs.ipv4 }} --end-ip-address ${{ steps.ip.outputs.ipv4 }}

      # instala o EF Tools
      - name: Install EF Tools
        run: dotnet tool install --global dotnet-ef
      
      - name: Build with dotnet
        run: dotnet build --configuration Release

      # Faz o update da database, já sobe o código para o GitHub com as migrations criadas
      - name: Update database
        run: dotnet ef database update

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'blogbalta2812webapp'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_63356710178446DC90C3A5AC90A8A321 }}
          package: .
